/**
 * Ory Kratos
 * Welcome to the ORY Kratos HTTP API documentation!
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface CompleteSelfServiceLoginFlowWithPasswordMethod
 */
export interface CompleteSelfServiceLoginFlowWithPasswordMethod {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof CompleteSelfServiceLoginFlowWithPasswordMethod
     */
    csrf_token?: string;
    /**
     * Identifier is the email or username of the user trying to log in.
     * @type {string}
     * @memberof CompleteSelfServiceLoginFlowWithPasswordMethod
     */
    identifier?: string;
    /**
     * The user\'s password.
     * @type {string}
     * @memberof CompleteSelfServiceLoginFlowWithPasswordMethod
     */
    password?: string;
}
/**
 *
 * @export
 * @interface CompleteSelfServiceRecoveryFlowWithLinkMethod
 */
export interface CompleteSelfServiceRecoveryFlowWithLinkMethod {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof CompleteSelfServiceRecoveryFlowWithLinkMethod
     */
    csrf_token?: string;
    /**
     * Email to Recover  Needs to be set when initiating the flow. If the email is a registered recovery email, a recovery link will be sent. If the email is not known, a email with details on what happened will be sent instead.  format: email in: body
     * @type {string}
     * @memberof CompleteSelfServiceRecoveryFlowWithLinkMethod
     */
    email?: string;
}
/**
 *
 * @export
 * @interface CompleteSelfServiceSettingsFlowWithPasswordMethod
 */
export interface CompleteSelfServiceSettingsFlowWithPasswordMethod {
    /**
     * CSRFToken is the anti-CSRF token  type: string
     * @type {string}
     * @memberof CompleteSelfServiceSettingsFlowWithPasswordMethod
     */
    csrf_token?: string;
    /**
     * Password is the updated password  type: string
     * @type {string}
     * @memberof CompleteSelfServiceSettingsFlowWithPasswordMethod
     */
    password: string;
}
/**
 *
 * @export
 * @interface CompleteSelfServiceVerificationFlowWithLinkMethod
 */
export interface CompleteSelfServiceVerificationFlowWithLinkMethod {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof CompleteSelfServiceVerificationFlowWithLinkMethod
     */
    csrf_token?: string;
    /**
     * Email to Verify  Needs to be set when initiating the flow. If the email is a registered verification email, a verification link will be sent. If the email is not known, a email with details on what happened will be sent instead.  format: email in: body
     * @type {string}
     * @memberof CompleteSelfServiceVerificationFlowWithLinkMethod
     */
    email?: string;
}
/**
 *
 * @export
 * @interface CreateIdentity
 */
export interface CreateIdentity {
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity\'s traits.
     * @type {string}
     * @memberof CreateIdentity
     */
    schema_id: string;
    /**
     * Traits represent an identity\'s traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_url`.
     * @type {object}
     * @memberof CreateIdentity
     */
    traits: object;
}
/**
 *
 * @export
 * @interface CreateRecoveryLink
 */
export interface CreateRecoveryLink {
    /**
     * Link Expires In  The recovery link will expire at that point in time. Defaults to the configuration value of `selfservice.flows.recovery.request_lifespan`.
     * @type {string}
     * @memberof CreateRecoveryLink
     */
    expires_in?: string;
    /**
     *
     * @type {string}
     * @memberof CreateRecoveryLink
     */
    identity_id: string;
}
/**
 *
 * @export
 * @interface ErrorContainer
 */
export interface ErrorContainer {
    /**
     * Errors in the container
     * @type {object}
     * @memberof ErrorContainer
     */
    errors: object;
    /**
     *
     * @type {string}
     * @memberof ErrorContainer
     */
    id: string;
}
/**
 * Field represents a HTML Form Field
 * @export
 * @interface FormField
 */
export interface FormField {
    /**
     * Disabled is the equivalent of `<input {{if .Disabled}}disabled{{end}}\">`
     * @type {boolean}
     * @memberof FormField
     */
    disabled?: boolean;
    /**
     *
     * @type {Array<Message>}
     * @memberof FormField
     */
    messages?: Array<Message>;
    /**
     * Name is the equivalent of `<input name=\"{{.Name}}\">`
     * @type {string}
     * @memberof FormField
     */
    name: string;
    /**
     * Pattern is the equivalent of `<input pattern=\"{{.Pattern}}\">`
     * @type {string}
     * @memberof FormField
     */
    pattern?: string;
    /**
     * Required is the equivalent of `<input required=\"{{.Required}}\">`
     * @type {boolean}
     * @memberof FormField
     */
    required?: boolean;
    /**
     * Type is the equivalent of `<input type=\"{{.Type}}\">`
     * @type {string}
     * @memberof FormField
     */
    type: string;
    /**
     * Value is the equivalent of `<input value=\"{{.Value}}\">`
     * @type {object}
     * @memberof FormField
     */
    value?: object;
}
/**
 * Error responses are sent when an error (e.g. unauthorized, bad request, ...) occurred.
 * @export
 * @interface GenericError
 */
export interface GenericError {
    /**
     *
     * @type {GenericErrorPayload}
     * @memberof GenericError
     */
    error?: GenericErrorPayload;
}
/**
 *
 * @export
 * @interface GenericErrorPayload
 */
export interface GenericErrorPayload {
    /**
     * Code represents the error status code (404, 403, 401, ...).
     * @type {number}
     * @memberof GenericErrorPayload
     */
    code?: number;
    /**
     * Debug contains debug information. This is usually not available and has to be enabled.
     * @type {string}
     * @memberof GenericErrorPayload
     */
    debug?: string;
    /**
     *
     * @type {object}
     * @memberof GenericErrorPayload
     */
    details?: object;
    /**
     *
     * @type {string}
     * @memberof GenericErrorPayload
     */
    message?: string;
    /**
     *
     * @type {string}
     * @memberof GenericErrorPayload
     */
    reason?: string;
    /**
     *
     * @type {string}
     * @memberof GenericErrorPayload
     */
    request?: string;
    /**
     *
     * @type {string}
     * @memberof GenericErrorPayload
     */
    status?: string;
}
/**
 *
 * @export
 * @interface HealthNotReadyStatus
 */
export interface HealthNotReadyStatus {
    /**
     * Errors contains a list of errors that caused the not ready status.
     * @type {{ [key: string]: string; }}
     * @memberof HealthNotReadyStatus
     */
    errors?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface HealthStatus
 */
export interface HealthStatus {
    /**
     * Status always contains \"ok\".
     * @type {string}
     * @memberof HealthStatus
     */
    status?: string;
}
/**
 *
 * @export
 * @interface Identity
 */
export interface Identity {
    /**
     *
     * @type {string}
     * @memberof Identity
     */
    id: string;
    /**
     * RecoveryAddresses contains all the addresses that can be used to recover an identity.
     * @type {Array<RecoveryAddress>}
     * @memberof Identity
     */
    recovery_addresses?: Array<RecoveryAddress>;
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity\'s traits.
     * @type {string}
     * @memberof Identity
     */
    schema_id: string;
    /**
     * SchemaURL is the URL of the endpoint where the identity\'s traits schema can be fetched from.  format: url
     * @type {string}
     * @memberof Identity
     */
    schema_url: string;
    /**
     *
     * @type {object}
     * @memberof Identity
     */
    traits: object;
    /**
     * VerifiableAddresses contains all the addresses that can be verified by the user.
     * @type {Array<VerifiableAddress>}
     * @memberof Identity
     */
    verifiable_addresses?: Array<VerifiableAddress>;
}
/**
 * This object represents a login flow. A login flow is initiated at the \"Initiate Login API / Browser Flow\" endpoint by a client.  Once a login flow is completed successfully, a session cookie or session token will be issued.
 * @export
 * @interface LoginFlow
 */
export interface LoginFlow {
    /**
     * and so on.
     * @type {string}
     * @memberof LoginFlow
     */
    active?: string;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated.
     * @type {string}
     * @memberof LoginFlow
     */
    expires_at: string;
    /**
     * Forced stores whether this login flow should enforce re-authentication.
     * @type {boolean}
     * @memberof LoginFlow
     */
    forced?: boolean;
    /**
     *
     * @type {string}
     * @memberof LoginFlow
     */
    id: string;
    /**
     * IssuedAt is the time (UTC) when the flow started.
     * @type {string}
     * @memberof LoginFlow
     */
    issued_at: string;
    /**
     *
     * @type {Array<Message>}
     * @memberof LoginFlow
     */
    messages?: Array<Message>;
    /**
     * List of login methods  This is the list of available login methods with their required form fields, such as `identifier` and `password` for the password login method. This will also contain error messages such as \"password can not be empty\".
     * @type {{ [key: string]: LoginFlowMethod; }}
     * @memberof LoginFlow
     */
    methods: {
        [key: string]: LoginFlowMethod;
    };
    /**
     * RequestURL is the initial URL that was requested from ORY Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof LoginFlow
     */
    request_url: string;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof LoginFlow
     */
    type?: string;
}
/**
 *
 * @export
 * @interface LoginFlowMethod
 */
export interface LoginFlowMethod {
    /**
     *
     * @type {LoginFlowMethodConfig}
     * @memberof LoginFlowMethod
     */
    config: LoginFlowMethodConfig;
    /**
     * and so on.
     * @type {string}
     * @memberof LoginFlowMethod
     */
    method: string;
}
/**
 *
 * @export
 * @interface LoginFlowMethodConfig
 */
export interface LoginFlowMethodConfig {
    /**
     * Action should be used as the form action URL `<form action=\"{{ .Action }}\" method=\"post\">`.
     * @type {string}
     * @memberof LoginFlowMethodConfig
     */
    action: string;
    /**
     * Fields contains multiple fields
     * @type {Array<FormField>}
     * @memberof LoginFlowMethodConfig
     */
    fields: Array<FormField>;
    /**
     *
     * @type {Array<Message>}
     * @memberof LoginFlowMethodConfig
     */
    messages?: Array<Message>;
    /**
     * Method is the form method (e.g. POST)
     * @type {string}
     * @memberof LoginFlowMethodConfig
     */
    method: string;
    /**
     * Providers is set for the \"oidc\" flow method.
     * @type {Array<FormField>}
     * @memberof LoginFlowMethodConfig
     */
    providers?: Array<FormField>;
}
/**
 * The Response for Login Flows via API
 * @export
 * @interface LoginViaApiResponse
 */
export interface LoginViaApiResponse {
    /**
     *
     * @type {Session}
     * @memberof LoginViaApiResponse
     */
    session: Session;
    /**
     * The Session Token  A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization Header:  Authorization: bearer ${session-token}  The session token is only issued for API flows, not for Browser flows!
     * @type {string}
     * @memberof LoginViaApiResponse
     */
    session_token: string;
}
/**
 *
 * @export
 * @interface Message
 */
export interface Message {
    /**
     *
     * @type {object}
     * @memberof Message
     */
    context?: object;
    /**
     *
     * @type {number}
     * @memberof Message
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof Message
     */
    text?: string;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof Message
     */
    type?: string;
}
/**
 *
 * @export
 * @interface RecoveryAddress
 */
export interface RecoveryAddress {
    /**
     *
     * @type {string}
     * @memberof RecoveryAddress
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof RecoveryAddress
     */
    value: string;
    /**
     *
     * @type {string}
     * @memberof RecoveryAddress
     */
    via: string;
}
/**
 * This request is used when an identity wants to recover their account.  We recommend reading the [Account Recovery Documentation](../self-service/flows/password-reset-account-recovery)
 * @export
 * @interface RecoveryFlow
 */
export interface RecoveryFlow {
    /**
     * Active, if set, contains the registration method that is being used. It is initially not set.
     * @type {string}
     * @memberof RecoveryFlow
     */
    active?: string;
    /**
     * ExpiresAt is the time (UTC) when the request expires. If the user still wishes to update the setting, a new request has to be initiated.
     * @type {string}
     * @memberof RecoveryFlow
     */
    expires_at: string;
    /**
     *
     * @type {string}
     * @memberof RecoveryFlow
     */
    id: string;
    /**
     * IssuedAt is the time (UTC) when the request occurred.
     * @type {string}
     * @memberof RecoveryFlow
     */
    issued_at: string;
    /**
     *
     * @type {Array<Message>}
     * @memberof RecoveryFlow
     */
    messages?: Array<Message>;
    /**
     * Methods contains context for all account recovery methods. If a registration request has been processed, but for example the password is incorrect, this will contain error messages.
     * @type {{ [key: string]: RecoveryFlowMethod; }}
     * @memberof RecoveryFlow
     */
    methods: {
        [key: string]: RecoveryFlowMethod;
    };
    /**
     * RequestURL is the initial URL that was requested from ORY Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof RecoveryFlow
     */
    request_url: string;
    /**
     *
     * @type {string}
     * @memberof RecoveryFlow
     */
    state: string;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof RecoveryFlow
     */
    type?: string;
}
/**
 *
 * @export
 * @interface RecoveryFlowMethod
 */
export interface RecoveryFlowMethod {
    /**
     *
     * @type {RecoveryFlowMethodConfig}
     * @memberof RecoveryFlowMethod
     */
    config: RecoveryFlowMethodConfig;
    /**
     * Method contains the request credentials type.
     * @type {string}
     * @memberof RecoveryFlowMethod
     */
    method: string;
}
/**
 *
 * @export
 * @interface RecoveryFlowMethodConfig
 */
export interface RecoveryFlowMethodConfig {
    /**
     * Action should be used as the form action URL `<form action=\"{{ .Action }}\" method=\"post\">`.
     * @type {string}
     * @memberof RecoveryFlowMethodConfig
     */
    action: string;
    /**
     * Fields contains multiple fields
     * @type {Array<FormField>}
     * @memberof RecoveryFlowMethodConfig
     */
    fields: Array<FormField>;
    /**
     *
     * @type {Array<Message>}
     * @memberof RecoveryFlowMethodConfig
     */
    messages?: Array<Message>;
    /**
     * Method is the form method (e.g. POST)
     * @type {string}
     * @memberof RecoveryFlowMethodConfig
     */
    method: string;
}
/**
 *
 * @export
 * @interface RecoveryLink
 */
export interface RecoveryLink {
    /**
     * Recovery Link Expires At  The timestamp when the recovery link expires.
     * @type {string}
     * @memberof RecoveryLink
     */
    expires_at?: string;
    /**
     * Recovery Link  This link can be used to recover the account.
     * @type {string}
     * @memberof RecoveryLink
     */
    recovery_link: string;
}
/**
 *
 * @export
 * @interface RegistrationFlow
 */
export interface RegistrationFlow {
    /**
     * and so on.
     * @type {string}
     * @memberof RegistrationFlow
     */
    active?: string;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated.
     * @type {string}
     * @memberof RegistrationFlow
     */
    expires_at: string;
    /**
     *
     * @type {string}
     * @memberof RegistrationFlow
     */
    id: string;
    /**
     * IssuedAt is the time (UTC) when the flow occurred.
     * @type {string}
     * @memberof RegistrationFlow
     */
    issued_at: string;
    /**
     *
     * @type {Array<Message>}
     * @memberof RegistrationFlow
     */
    messages?: Array<Message>;
    /**
     * Methods contains context for all enabled registration methods. If a registration flow has been processed, but for example the password is incorrect, this will contain error messages.
     * @type {{ [key: string]: RegistrationFlowMethod; }}
     * @memberof RegistrationFlow
     */
    methods: {
        [key: string]: RegistrationFlowMethod;
    };
    /**
     * RequestURL is the initial URL that was requested from ORY Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof RegistrationFlow
     */
    request_url: string;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof RegistrationFlow
     */
    type?: string;
}
/**
 *
 * @export
 * @interface RegistrationFlowMethod
 */
export interface RegistrationFlowMethod {
    /**
     *
     * @type {RegistrationFlowMethodConfig}
     * @memberof RegistrationFlowMethod
     */
    config: RegistrationFlowMethodConfig;
    /**
     * and so on.
     * @type {string}
     * @memberof RegistrationFlowMethod
     */
    method: string;
}
/**
 *
 * @export
 * @interface RegistrationFlowMethodConfig
 */
export interface RegistrationFlowMethodConfig {
    /**
     * Action should be used as the form action URL `<form action=\"{{ .Action }}\" method=\"post\">`.
     * @type {string}
     * @memberof RegistrationFlowMethodConfig
     */
    action: string;
    /**
     * Fields contains multiple fields
     * @type {Array<FormField>}
     * @memberof RegistrationFlowMethodConfig
     */
    fields: Array<FormField>;
    /**
     *
     * @type {Array<Message>}
     * @memberof RegistrationFlowMethodConfig
     */
    messages?: Array<Message>;
    /**
     * Method is the form method (e.g. POST)
     * @type {string}
     * @memberof RegistrationFlowMethodConfig
     */
    method: string;
    /**
     * Providers is set for the \"oidc\" registration method.
     * @type {Array<FormField>}
     * @memberof RegistrationFlowMethodConfig
     */
    providers?: Array<FormField>;
}
/**
 * The Response for Registration Flows via API
 * @export
 * @interface RegistrationViaApiResponse
 */
export interface RegistrationViaApiResponse {
    /**
     *
     * @type {Identity}
     * @memberof RegistrationViaApiResponse
     */
    identity: Identity;
    /**
     *
     * @type {Session}
     * @memberof RegistrationViaApiResponse
     */
    session?: Session;
    /**
     * The Session Token  This field is only set when the session hook is configured as a post-registration hook.  A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization Header:  Authorization: bearer ${session-token}  The session token is only issued for API flows, not for Browser flows!
     * @type {string}
     * @memberof RegistrationViaApiResponse
     */
    session_token: string;
}
/**
 *
 * @export
 * @interface RevokeSession
 */
export interface RevokeSession {
    /**
     * The Session Token  Invalidate this session token.
     * @type {string}
     * @memberof RevokeSession
     */
    session_token: string;
}
/**
 *
 * @export
 * @interface Session
 */
export interface Session {
    /**
     *
     * @type {boolean}
     * @memberof Session
     */
    active?: boolean;
    /**
     *
     * @type {string}
     * @memberof Session
     */
    authenticated_at: string;
    /**
     *
     * @type {string}
     * @memberof Session
     */
    expires_at: string;
    /**
     *
     * @type {string}
     * @memberof Session
     */
    id: string;
    /**
     *
     * @type {Identity}
     * @memberof Session
     */
    identity: Identity;
    /**
     *
     * @type {string}
     * @memberof Session
     */
    issued_at: string;
}
/**
 * This flow is used when an identity wants to update settings (e.g. profile data, passwords, ...) in a selfservice manner.  We recommend reading the [User Settings Documentation](../self-service/flows/user-settings)
 * @export
 * @interface SettingsFlow
 */
export interface SettingsFlow {
    /**
     * Active, if set, contains the registration method that is being used. It is initially not set.
     * @type {string}
     * @memberof SettingsFlow
     */
    active?: string;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting, a new flow has to be initiated.
     * @type {string}
     * @memberof SettingsFlow
     */
    expires_at: string;
    /**
     *
     * @type {string}
     * @memberof SettingsFlow
     */
    id: string;
    /**
     *
     * @type {Identity}
     * @memberof SettingsFlow
     */
    identity: Identity;
    /**
     * IssuedAt is the time (UTC) when the flow occurred.
     * @type {string}
     * @memberof SettingsFlow
     */
    issued_at: string;
    /**
     *
     * @type {Array<Message>}
     * @memberof SettingsFlow
     */
    messages?: Array<Message>;
    /**
     * Methods contains context for all enabled registration methods. If a settings flow has been processed, but for example the first name is empty, this will contain error messages.
     * @type {{ [key: string]: SettingsFlowMethod; }}
     * @memberof SettingsFlow
     */
    methods: {
        [key: string]: SettingsFlowMethod;
    };
    /**
     * RequestURL is the initial URL that was requested from ORY Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof SettingsFlow
     */
    request_url: string;
    /**
     *
     * @type {string}
     * @memberof SettingsFlow
     */
    state: string;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof SettingsFlow
     */
    type?: string;
}
/**
 *
 * @export
 * @interface SettingsFlowMethod
 */
export interface SettingsFlowMethod {
    /**
     *
     * @type {SettingsFlowMethodConfig}
     * @memberof SettingsFlowMethod
     */
    config: SettingsFlowMethodConfig;
    /**
     * Method is the name of this flow method.
     * @type {string}
     * @memberof SettingsFlowMethod
     */
    method: string;
}
/**
 *
 * @export
 * @interface SettingsFlowMethodConfig
 */
export interface SettingsFlowMethodConfig {
    /**
     * Action should be used as the form action URL `<form action=\"{{ .Action }}\" method=\"post\">`.
     * @type {string}
     * @memberof SettingsFlowMethodConfig
     */
    action: string;
    /**
     * Fields contains multiple fields
     * @type {Array<FormField>}
     * @memberof SettingsFlowMethodConfig
     */
    fields: Array<FormField>;
    /**
     *
     * @type {Array<Message>}
     * @memberof SettingsFlowMethodConfig
     */
    messages?: Array<Message>;
    /**
     * Method is the form method (e.g. POST)
     * @type {string}
     * @memberof SettingsFlowMethodConfig
     */
    method: string;
}
/**
 * The Response for Settings Flows via API
 * @export
 * @interface SettingsViaApiResponse
 */
export interface SettingsViaApiResponse {
    /**
     *
     * @type {SettingsFlow}
     * @memberof SettingsViaApiResponse
     */
    flow: SettingsFlow;
    /**
     *
     * @type {Identity}
     * @memberof SettingsViaApiResponse
     */
    identity: Identity;
}
/**
 *
 * @export
 * @interface UpdateIdentity
 */
export interface UpdateIdentity {
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity\'s traits. If set will update the Identity\'s SchemaID.
     * @type {string}
     * @memberof UpdateIdentity
     */
    schema_id?: string;
    /**
     * Traits represent an identity\'s traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_id`.
     * @type {object}
     * @memberof UpdateIdentity
     */
    traits: object;
}
/**
 *
 * @export
 * @interface VerifiableAddress
 */
export interface VerifiableAddress {
    /**
     *
     * @type {string}
     * @memberof VerifiableAddress
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof VerifiableAddress
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof VerifiableAddress
     */
    value: string;
    /**
     *
     * @type {boolean}
     * @memberof VerifiableAddress
     */
    verified: boolean;
    /**
     *
     * @type {string}
     * @memberof VerifiableAddress
     */
    verified_at?: string;
    /**
     *
     * @type {string}
     * @memberof VerifiableAddress
     */
    via: string;
}
/**
 * Used to verify an out-of-band communication channel such as an email address or a phone number.  For more information head over to: https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation
 * @export
 * @interface VerificationFlow
 */
export interface VerificationFlow {
    /**
     * Active, if set, contains the registration method that is being used. It is initially not set.
     * @type {string}
     * @memberof VerificationFlow
     */
    active?: string;
    /**
     * ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address, a new request has to be initiated.
     * @type {string}
     * @memberof VerificationFlow
     */
    expires_at?: string;
    /**
     *
     * @type {string}
     * @memberof VerificationFlow
     */
    id?: string;
    /**
     * IssuedAt is the time (UTC) when the request occurred.
     * @type {string}
     * @memberof VerificationFlow
     */
    issued_at?: string;
    /**
     *
     * @type {Array<Message>}
     * @memberof VerificationFlow
     */
    messages?: Array<Message>;
    /**
     * Methods contains context for all account verification methods. If a registration request has been processed, but for example the password is incorrect, this will contain error messages.
     * @type {{ [key: string]: VerificationFlowMethod; }}
     * @memberof VerificationFlow
     */
    methods: {
        [key: string]: VerificationFlowMethod;
    };
    /**
     * RequestURL is the initial URL that was requested from ORY Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof VerificationFlow
     */
    request_url?: string;
    /**
     *
     * @type {string}
     * @memberof VerificationFlow
     */
    state: string;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof VerificationFlow
     */
    type?: string;
}
/**
 *
 * @export
 * @interface VerificationFlowMethod
 */
export interface VerificationFlowMethod {
    /**
     *
     * @type {VerificationFlowMethodConfig}
     * @memberof VerificationFlowMethod
     */
    config: VerificationFlowMethodConfig;
    /**
     * Method contains the request credentials type.
     * @type {string}
     * @memberof VerificationFlowMethod
     */
    method: string;
}
/**
 *
 * @export
 * @interface VerificationFlowMethodConfig
 */
export interface VerificationFlowMethodConfig {
    /**
     * Action should be used as the form action URL `<form action=\"{{ .Action }}\" method=\"post\">`.
     * @type {string}
     * @memberof VerificationFlowMethodConfig
     */
    action: string;
    /**
     * Fields contains multiple fields
     * @type {Array<FormField>}
     * @memberof VerificationFlowMethodConfig
     */
    fields: Array<FormField>;
    /**
     *
     * @type {Array<Message>}
     * @memberof VerificationFlowMethodConfig
     */
    messages?: Array<Message>;
    /**
     * Method is the form method (e.g. POST)
     * @type {string}
     * @memberof VerificationFlowMethodConfig
     */
    method: string;
}
/**
 *
 * @export
 * @interface Version
 */
export interface Version {
    /**
     * Version is the service\'s version.
     * @type {string}
     * @memberof Version
     */
    version?: string;
}
/**
 * AdminApi - axios parameter creator
 * @export
 */
export declare const AdminApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint creates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Create an Identity
     * @param {CreateIdentity} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIdentity: (body?: CreateIdentity, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {CreateRecoveryLink} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRecoveryLink: (body?: CreateRecoveryLink, options?: any) => Promise<RequestArgs>;
    /**
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Delete an Identity
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentity: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Get an Identity
     * @param {string} id ID must be set to the ID of identity you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentity: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Traits Schema Definition
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?error=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [ORY Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get User-Facing Self-Service Errors
     * @param {string} error Error is the container\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceError: (error: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceLoginFlow: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Get information about a recovery flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRecoveryFlow: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRegistrationFlow: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * When accessing this endpoint through ORY Kratos\' Public API you must ensure that either the ORY Kratos Session Cookie or the ORY Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using ORY Kratos\' Admin API.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceSettingsFlow: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceVerificationFlow: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary List Identities
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIdentities: (perPage?: number, page?: number, options?: any) => Promise<RequestArgs>;
    /**
     * ``` metadata: annotations: prometheus.io/port: \"4434\" prometheus.io/path: \"/metrics/prometheus\" ```
     * @summary Get snapshot metrics from the Hydra service. If you\'re using k8s, you can then add annotations to your deployment like so:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    prometheus: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint updates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Update an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {UpdateIdentity} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentity: (id: string, body?: UpdateIdentity, options?: any) => Promise<RequestArgs>;
};
/**
 * AdminApi - functional programming interface
 * @export
 */
export declare const AdminApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint creates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Create an Identity
     * @param {CreateIdentity} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIdentity(body?: CreateIdentity, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Identity>>;
    /**
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {CreateRecoveryLink} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRecoveryLink(body?: CreateRecoveryLink, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecoveryLink>>;
    /**
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Delete an Identity
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentity(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Get an Identity
     * @param {string} id ID must be set to the ID of identity you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentity(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Identity>>;
    /**
     * Get a Traits Schema Definition
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?error=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [ORY Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get User-Facing Self-Service Errors
     * @param {string} error Error is the container\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceError(error: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorContainer>>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceLoginFlow(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginFlow>>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Get information about a recovery flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRecoveryFlow(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecoveryFlow>>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRegistrationFlow(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationFlow>>;
    /**
     * When accessing this endpoint through ORY Kratos\' Public API you must ensure that either the ORY Kratos Session Cookie or the ORY Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using ORY Kratos\' Admin API.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceSettingsFlow(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsFlow>>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceVerificationFlow(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationFlow>>;
    /**
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary List Identities
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIdentities(perPage?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Identity>>>;
    /**
     * ``` metadata: annotations: prometheus.io/port: \"4434\" prometheus.io/path: \"/metrics/prometheus\" ```
     * @summary Get snapshot metrics from the Hydra service. If you\'re using k8s, you can then add annotations to your deployment like so:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    prometheus(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint updates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Update an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {UpdateIdentity} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentity(id: string, body?: UpdateIdentity, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Identity>>;
};
/**
 * AdminApi - factory interface
 * @export
 */
export declare const AdminApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint creates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Create an Identity
     * @param {CreateIdentity} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIdentity(body?: CreateIdentity, options?: any): AxiosPromise<Identity>;
    /**
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {CreateRecoveryLink} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRecoveryLink(body?: CreateRecoveryLink, options?: any): AxiosPromise<RecoveryLink>;
    /**
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Delete an Identity
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentity(id: string, options?: any): AxiosPromise<void>;
    /**
     * Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Get an Identity
     * @param {string} id ID must be set to the ID of identity you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentity(id: string, options?: any): AxiosPromise<Identity>;
    /**
     * Get a Traits Schema Definition
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema(id: string, options?: any): AxiosPromise<object>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?error=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [ORY Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get User-Facing Self-Service Errors
     * @param {string} error Error is the container\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceError(error: string, options?: any): AxiosPromise<ErrorContainer>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceLoginFlow(id: string, options?: any): AxiosPromise<LoginFlow>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Get information about a recovery flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRecoveryFlow(id: string, options?: any): AxiosPromise<RecoveryFlow>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRegistrationFlow(id: string, options?: any): AxiosPromise<RegistrationFlow>;
    /**
     * When accessing this endpoint through ORY Kratos\' Public API you must ensure that either the ORY Kratos Session Cookie or the ORY Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using ORY Kratos\' Admin API.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceSettingsFlow(id: string, options?: any): AxiosPromise<SettingsFlow>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceVerificationFlow(id: string, options?: any): AxiosPromise<VerificationFlow>;
    /**
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary List Identities
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIdentities(perPage?: number, page?: number, options?: any): AxiosPromise<Array<Identity>>;
    /**
     * ``` metadata: annotations: prometheus.io/port: \"4434\" prometheus.io/path: \"/metrics/prometheus\" ```
     * @summary Get snapshot metrics from the Hydra service. If you\'re using k8s, you can then add annotations to your deployment like so:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    prometheus(options?: any): AxiosPromise<void>;
    /**
     * This endpoint updates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Update an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {UpdateIdentity} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentity(id: string, body?: UpdateIdentity, options?: any): AxiosPromise<Identity>;
};
/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export declare class AdminApi extends BaseAPI {
    /**
     * This endpoint creates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Create an Identity
     * @param {CreateIdentity} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    createIdentity(body?: CreateIdentity, options?: any): Promise<import("axios").AxiosResponse<Identity>>;
    /**
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {CreateRecoveryLink} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    createRecoveryLink(body?: CreateRecoveryLink, options?: any): Promise<import("axios").AxiosResponse<RecoveryLink>>;
    /**
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Delete an Identity
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteIdentity(id: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Get an Identity
     * @param {string} id ID must be set to the ID of identity you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getIdentity(id: string, options?: any): Promise<import("axios").AxiosResponse<Identity>>;
    /**
     * Get a Traits Schema Definition
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getSchema(id: string, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?error=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [ORY Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get User-Facing Self-Service Errors
     * @param {string} error Error is the container\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getSelfServiceError(error: string, options?: any): Promise<import("axios").AxiosResponse<ErrorContainer>>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getSelfServiceLoginFlow(id: string, options?: any): Promise<import("axios").AxiosResponse<LoginFlow>>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Get information about a recovery flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getSelfServiceRecoveryFlow(id: string, options?: any): Promise<import("axios").AxiosResponse<RecoveryFlow>>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getSelfServiceRegistrationFlow(id: string, options?: any): Promise<import("axios").AxiosResponse<RegistrationFlow>>;
    /**
     * When accessing this endpoint through ORY Kratos\' Public API you must ensure that either the ORY Kratos Session Cookie or the ORY Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using ORY Kratos\' Admin API.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getSelfServiceSettingsFlow(id: string, options?: any): Promise<import("axios").AxiosResponse<SettingsFlow>>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getSelfServiceVerificationFlow(id: string, options?: any): Promise<import("axios").AxiosResponse<VerificationFlow>>;
    /**
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary List Identities
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listIdentities(perPage?: number, page?: number, options?: any): Promise<import("axios").AxiosResponse<Identity[]>>;
    /**
     * ``` metadata: annotations: prometheus.io/port: \"4434\" prometheus.io/path: \"/metrics/prometheus\" ```
     * @summary Get snapshot metrics from the Hydra service. If you\'re using k8s, you can then add annotations to your deployment like so:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    prometheus(options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint updates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [ORY Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Update an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {UpdateIdentity} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    updateIdentity(id: string, body?: UpdateIdentity, options?: any): Promise<import("axios").AxiosResponse<Identity>>;
}
/**
 * HealthApi - axios parameter creator
 * @export
 */
export declare const HealthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint returns a 200 status code when the HTTP server is up running. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check alive status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isInstanceAlive: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check readiness status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isInstanceReady: (options?: any) => Promise<RequestArgs>;
};
/**
 * HealthApi - functional programming interface
 * @export
 */
export declare const HealthApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint returns a 200 status code when the HTTP server is up running. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check alive status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isInstanceAlive(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthStatus>>;
    /**
     * This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check readiness status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isInstanceReady(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthStatus>>;
};
/**
 * HealthApi - factory interface
 * @export
 */
export declare const HealthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint returns a 200 status code when the HTTP server is up running. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check alive status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isInstanceAlive(options?: any): AxiosPromise<HealthStatus>;
    /**
     * This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check readiness status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isInstanceReady(options?: any): AxiosPromise<HealthStatus>;
};
/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export declare class HealthApi extends BaseAPI {
    /**
     * This endpoint returns a 200 status code when the HTTP server is up running. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check alive status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    isInstanceAlive(options?: any): Promise<import("axios").AxiosResponse<HealthStatus>>;
    /**
     * This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check readiness status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    isInstanceReady(options?: any): Promise<import("axios").AxiosResponse<HealthStatus>>;
}
/**
 * PublicApi - axios parameter creator
 * @export
 */
export declare const PublicApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint completes a browser-based settings flow. This is usually achieved by POSTing data to this endpoint.  > This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...) and HTML Forms.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete the Browser-Based Settings Flow for the OpenID Connect Strategy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceBrowserSettingsOIDCSettingsFlow: (options?: any) => Promise<RequestArgs>;
    /**
     * Use this endpoint to complete a login flow by sending an identity\'s identifier and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 302 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Complete Login Flow with Username/Email Password Method
     * @param {string} flow The Flow ID
     * @param {CompleteSelfServiceLoginFlowWithPasswordMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceLoginFlowWithPasswordMethod: (flow: string, body?: CompleteSelfServiceLoginFlowWithPasswordMethod, options?: any) => Promise<RequestArgs>;
    /**
     * Use this endpoint to complete a recovery flow using the link method. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Complete Recovery Flow with Link Method
     * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.
     * @param {string} [flow] The Flow ID  format: uuid
     * @param {CompleteSelfServiceRecoveryFlowWithLinkMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceRecoveryFlowWithLinkMethod: (token?: string, flow?: string, body?: CompleteSelfServiceRecoveryFlowWithLinkMethod, options?: any) => Promise<RequestArgs>;
    /**
     * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 302 redirect to a fresh registration flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 302 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Complete Registration Flow with Username/Email Password Method
     * @param {string} [flow] Flow is flow ID.
     * @param {object} [payload]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceRegistrationFlowWithPasswordMethod: (flow?: string, payload?: object, options?: any) => Promise<RequestArgs>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached. Implies that the user needs to re-authenticate.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 302 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 302 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow with Username/Email Password Method
     * @param {string} [flow] Flow is flow ID.
     * @param {CompleteSelfServiceSettingsFlowWithPasswordMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceSettingsFlowWithPasswordMethod: (flow?: string, body?: CompleteSelfServiceSettingsFlowWithPasswordMethod, options?: any) => Promise<RequestArgs>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated traits. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached and a sensitive field was updated (e.g. recovery email). Implies that the user needs to re-authenticate.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 302 redirect to the settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 302 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow with Profile Method
     * @param {string} [flow] Flow is flow ID.
     * @param {object} [payload]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceSettingsFlowWithProfileMethod: (flow?: string, payload?: object, options?: any) => Promise<RequestArgs>;
    /**
     * Use this endpoint to complete a verification flow using the link method. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Complete Verification Flow with Link Method
     * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.
     * @param {string} [flow] The Flow ID  format: uuid
     * @param {CompleteSelfServiceVerificationFlowWithLinkMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceVerificationFlowWithLinkMethod: (token?: string, flow?: string, body?: CompleteSelfServiceVerificationFlowWithLinkMethod, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Traits Schema Definition
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?error=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [ORY Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get User-Facing Self-Service Errors
     * @param {string} error Error is the container\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceError: (error: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceLoginFlow: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Get information about a recovery flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRecoveryFlow: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRegistrationFlow: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * When accessing this endpoint through ORY Kratos\' Public API you must ensure that either the ORY Kratos Session Cookie or the ORY Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using ORY Kratos\' Admin API.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceSettingsFlow: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceVerificationFlow: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a logout flow.  > This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  On successful logout, the browser will be redirected (HTTP 302 Found) to `urls.default_return_to`.  More information can be found at [ORY Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @summary Initialize Browser-Based Logout User Flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceBrowserLogoutFlow: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a login flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for API clients
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginViaAPIFlow: (refresh?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based user login flow. Once initialized, the browser will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginViaBrowserFlow: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for API Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryViaAPIFlow: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for Browser Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryViaBrowserFlow: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for API clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationViaAPIFlow: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based user registration flow. Once initialized, the browser will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  :::note  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  :::  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationViaBrowserFlow: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid ORY Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for API Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsViaAPIFlow: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid ORY Kratos Session Cookie is included in the request, a login flow will be initialized.  :::note  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  :::  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for Browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsViaBrowserFlow: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for API Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationViaAPIFlow: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for Browser Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationViaBrowserFlow: (options?: any) => Promise<RequestArgs>;
    /**
     * Use this endpoint to revoke a session using its token. This endpoint is particularly useful for API clients such as mobile apps to log the user out of the system and invalidate the session.  This endpoint does not remove any HTTP Cookies - use the Self-Service Logout Flow instead.
     * @summary Revoke and Invalidate a Session
     * @param {RevokeSession} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeSession: (body: RevokeSession, options?: any) => Promise<RequestArgs>;
    /**
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  This endpoint is useful for reverse proxies and API Gateways.
     * @summary Check Who the Current HTTP Session Belongs To
     * @param {string} [cookie]
     * @param {string} [authorization] in: authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    whoami: (cookie?: string, authorization?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * PublicApi - functional programming interface
 * @export
 */
export declare const PublicApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint completes a browser-based settings flow. This is usually achieved by POSTing data to this endpoint.  > This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...) and HTML Forms.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete the Browser-Based Settings Flow for the OpenID Connect Strategy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceBrowserSettingsOIDCSettingsFlow(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this endpoint to complete a login flow by sending an identity\'s identifier and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 302 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Complete Login Flow with Username/Email Password Method
     * @param {string} flow The Flow ID
     * @param {CompleteSelfServiceLoginFlowWithPasswordMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceLoginFlowWithPasswordMethod(flow: string, body?: CompleteSelfServiceLoginFlowWithPasswordMethod, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginViaApiResponse>>;
    /**
     * Use this endpoint to complete a recovery flow using the link method. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Complete Recovery Flow with Link Method
     * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.
     * @param {string} [flow] The Flow ID  format: uuid
     * @param {CompleteSelfServiceRecoveryFlowWithLinkMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceRecoveryFlowWithLinkMethod(token?: string, flow?: string, body?: CompleteSelfServiceRecoveryFlowWithLinkMethod, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 302 redirect to a fresh registration flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 302 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Complete Registration Flow with Username/Email Password Method
     * @param {string} [flow] Flow is flow ID.
     * @param {object} [payload]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceRegistrationFlowWithPasswordMethod(flow?: string, payload?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationViaApiResponse>>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached. Implies that the user needs to re-authenticate.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 302 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 302 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow with Username/Email Password Method
     * @param {string} [flow] Flow is flow ID.
     * @param {CompleteSelfServiceSettingsFlowWithPasswordMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceSettingsFlowWithPasswordMethod(flow?: string, body?: CompleteSelfServiceSettingsFlowWithPasswordMethod, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsViaApiResponse>>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated traits. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached and a sensitive field was updated (e.g. recovery email). Implies that the user needs to re-authenticate.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 302 redirect to the settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 302 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow with Profile Method
     * @param {string} [flow] Flow is flow ID.
     * @param {object} [payload]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceSettingsFlowWithProfileMethod(flow?: string, payload?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsFlow>>;
    /**
     * Use this endpoint to complete a verification flow using the link method. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Complete Verification Flow with Link Method
     * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.
     * @param {string} [flow] The Flow ID  format: uuid
     * @param {CompleteSelfServiceVerificationFlowWithLinkMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceVerificationFlowWithLinkMethod(token?: string, flow?: string, body?: CompleteSelfServiceVerificationFlowWithLinkMethod, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a Traits Schema Definition
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?error=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [ORY Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get User-Facing Self-Service Errors
     * @param {string} error Error is the container\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceError(error: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorContainer>>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceLoginFlow(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginFlow>>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Get information about a recovery flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRecoveryFlow(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecoveryFlow>>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRegistrationFlow(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationFlow>>;
    /**
     * When accessing this endpoint through ORY Kratos\' Public API you must ensure that either the ORY Kratos Session Cookie or the ORY Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using ORY Kratos\' Admin API.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceSettingsFlow(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsFlow>>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceVerificationFlow(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationFlow>>;
    /**
     * This endpoint initializes a logout flow.  > This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  On successful logout, the browser will be redirected (HTTP 302 Found) to `urls.default_return_to`.  More information can be found at [ORY Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @summary Initialize Browser-Based Logout User Flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceBrowserLogoutFlow(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint initiates a login flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for API clients
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginViaAPIFlow(refresh?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginFlow>>;
    /**
     * This endpoint initializes a browser-based user login flow. Once initialized, the browser will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginViaBrowserFlow(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for API Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryViaAPIFlow(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecoveryFlow>>;
    /**
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for Browser Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryViaBrowserFlow(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for API clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationViaAPIFlow(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationFlow>>;
    /**
     * This endpoint initializes a browser-based user registration flow. Once initialized, the browser will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  :::note  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  :::  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationViaBrowserFlow(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid ORY Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for API Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsViaAPIFlow(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsFlow>>;
    /**
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid ORY Kratos Session Cookie is included in the request, a login flow will be initialized.  :::note  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  :::  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for Browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsViaBrowserFlow(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for API Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationViaAPIFlow(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationFlow>>;
    /**
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for Browser Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationViaBrowserFlow(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this endpoint to revoke a session using its token. This endpoint is particularly useful for API clients such as mobile apps to log the user out of the system and invalidate the session.  This endpoint does not remove any HTTP Cookies - use the Self-Service Logout Flow instead.
     * @summary Revoke and Invalidate a Session
     * @param {RevokeSession} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeSession(body: RevokeSession, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  This endpoint is useful for reverse proxies and API Gateways.
     * @summary Check Who the Current HTTP Session Belongs To
     * @param {string} [cookie]
     * @param {string} [authorization] in: authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    whoami(cookie?: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>>;
};
/**
 * PublicApi - factory interface
 * @export
 */
export declare const PublicApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint completes a browser-based settings flow. This is usually achieved by POSTing data to this endpoint.  > This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...) and HTML Forms.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete the Browser-Based Settings Flow for the OpenID Connect Strategy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceBrowserSettingsOIDCSettingsFlow(options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to complete a login flow by sending an identity\'s identifier and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 302 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Complete Login Flow with Username/Email Password Method
     * @param {string} flow The Flow ID
     * @param {CompleteSelfServiceLoginFlowWithPasswordMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceLoginFlowWithPasswordMethod(flow: string, body?: CompleteSelfServiceLoginFlowWithPasswordMethod, options?: any): AxiosPromise<LoginViaApiResponse>;
    /**
     * Use this endpoint to complete a recovery flow using the link method. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Complete Recovery Flow with Link Method
     * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.
     * @param {string} [flow] The Flow ID  format: uuid
     * @param {CompleteSelfServiceRecoveryFlowWithLinkMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceRecoveryFlowWithLinkMethod(token?: string, flow?: string, body?: CompleteSelfServiceRecoveryFlowWithLinkMethod, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 302 redirect to a fresh registration flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 302 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Complete Registration Flow with Username/Email Password Method
     * @param {string} [flow] Flow is flow ID.
     * @param {object} [payload]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceRegistrationFlowWithPasswordMethod(flow?: string, payload?: object, options?: any): AxiosPromise<RegistrationViaApiResponse>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached. Implies that the user needs to re-authenticate.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 302 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 302 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow with Username/Email Password Method
     * @param {string} [flow] Flow is flow ID.
     * @param {CompleteSelfServiceSettingsFlowWithPasswordMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceSettingsFlowWithPasswordMethod(flow?: string, body?: CompleteSelfServiceSettingsFlowWithPasswordMethod, options?: any): AxiosPromise<SettingsViaApiResponse>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated traits. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached and a sensitive field was updated (e.g. recovery email). Implies that the user needs to re-authenticate.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 302 redirect to the settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 302 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow with Profile Method
     * @param {string} [flow] Flow is flow ID.
     * @param {object} [payload]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceSettingsFlowWithProfileMethod(flow?: string, payload?: object, options?: any): AxiosPromise<SettingsFlow>;
    /**
     * Use this endpoint to complete a verification flow using the link method. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Complete Verification Flow with Link Method
     * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.
     * @param {string} [flow] The Flow ID  format: uuid
     * @param {CompleteSelfServiceVerificationFlowWithLinkMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSelfServiceVerificationFlowWithLinkMethod(token?: string, flow?: string, body?: CompleteSelfServiceVerificationFlowWithLinkMethod, options?: any): AxiosPromise<void>;
    /**
     * Get a Traits Schema Definition
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema(id: string, options?: any): AxiosPromise<object>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?error=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [ORY Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get User-Facing Self-Service Errors
     * @param {string} error Error is the container\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceError(error: string, options?: any): AxiosPromise<ErrorContainer>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceLoginFlow(id: string, options?: any): AxiosPromise<LoginFlow>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Get information about a recovery flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRecoveryFlow(id: string, options?: any): AxiosPromise<RecoveryFlow>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRegistrationFlow(id: string, options?: any): AxiosPromise<RegistrationFlow>;
    /**
     * When accessing this endpoint through ORY Kratos\' Public API you must ensure that either the ORY Kratos Session Cookie or the ORY Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using ORY Kratos\' Admin API.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceSettingsFlow(id: string, options?: any): AxiosPromise<SettingsFlow>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceVerificationFlow(id: string, options?: any): AxiosPromise<VerificationFlow>;
    /**
     * This endpoint initializes a logout flow.  > This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  On successful logout, the browser will be redirected (HTTP 302 Found) to `urls.default_return_to`.  More information can be found at [ORY Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @summary Initialize Browser-Based Logout User Flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceBrowserLogoutFlow(options?: any): AxiosPromise<void>;
    /**
     * This endpoint initiates a login flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for API clients
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginViaAPIFlow(refresh?: boolean, options?: any): AxiosPromise<LoginFlow>;
    /**
     * This endpoint initializes a browser-based user login flow. Once initialized, the browser will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginViaBrowserFlow(options?: any): AxiosPromise<void>;
    /**
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for API Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryViaAPIFlow(options?: any): AxiosPromise<RecoveryFlow>;
    /**
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for Browser Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryViaBrowserFlow(options?: any): AxiosPromise<void>;
    /**
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for API clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationViaAPIFlow(options?: any): AxiosPromise<RegistrationFlow>;
    /**
     * This endpoint initializes a browser-based user registration flow. Once initialized, the browser will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  :::note  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  :::  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationViaBrowserFlow(options?: any): AxiosPromise<void>;
    /**
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid ORY Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for API Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsViaAPIFlow(options?: any): AxiosPromise<SettingsFlow>;
    /**
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid ORY Kratos Session Cookie is included in the request, a login flow will be initialized.  :::note  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  :::  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for Browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsViaBrowserFlow(options?: any): AxiosPromise<void>;
    /**
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for API Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationViaAPIFlow(options?: any): AxiosPromise<VerificationFlow>;
    /**
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for Browser Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationViaBrowserFlow(options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to revoke a session using its token. This endpoint is particularly useful for API clients such as mobile apps to log the user out of the system and invalidate the session.  This endpoint does not remove any HTTP Cookies - use the Self-Service Logout Flow instead.
     * @summary Revoke and Invalidate a Session
     * @param {RevokeSession} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeSession(body: RevokeSession, options?: any): AxiosPromise<void>;
    /**
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  This endpoint is useful for reverse proxies and API Gateways.
     * @summary Check Who the Current HTTP Session Belongs To
     * @param {string} [cookie]
     * @param {string} [authorization] in: authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    whoami(cookie?: string, authorization?: string, options?: any): AxiosPromise<Session>;
};
/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export declare class PublicApi extends BaseAPI {
    /**
     * This endpoint completes a browser-based settings flow. This is usually achieved by POSTing data to this endpoint.  > This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...) and HTML Forms.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete the Browser-Based Settings Flow for the OpenID Connect Strategy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    completeSelfServiceBrowserSettingsOIDCSettingsFlow(options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to complete a login flow by sending an identity\'s identifier and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 302 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Complete Login Flow with Username/Email Password Method
     * @param {string} flow The Flow ID
     * @param {CompleteSelfServiceLoginFlowWithPasswordMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    completeSelfServiceLoginFlowWithPasswordMethod(flow: string, body?: CompleteSelfServiceLoginFlowWithPasswordMethod, options?: any): Promise<import("axios").AxiosResponse<LoginViaApiResponse>>;
    /**
     * Use this endpoint to complete a recovery flow using the link method. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Complete Recovery Flow with Link Method
     * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.
     * @param {string} [flow] The Flow ID  format: uuid
     * @param {CompleteSelfServiceRecoveryFlowWithLinkMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    completeSelfServiceRecoveryFlowWithLinkMethod(token?: string, flow?: string, body?: CompleteSelfServiceRecoveryFlowWithLinkMethod, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 302 redirect to a fresh registration flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 302 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Complete Registration Flow with Username/Email Password Method
     * @param {string} [flow] Flow is flow ID.
     * @param {object} [payload]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    completeSelfServiceRegistrationFlowWithPasswordMethod(flow?: string, payload?: object, options?: any): Promise<import("axios").AxiosResponse<RegistrationViaApiResponse>>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached. Implies that the user needs to re-authenticate.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 302 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 302 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow with Username/Email Password Method
     * @param {string} [flow] Flow is flow ID.
     * @param {CompleteSelfServiceSettingsFlowWithPasswordMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    completeSelfServiceSettingsFlowWithPasswordMethod(flow?: string, body?: CompleteSelfServiceSettingsFlowWithPasswordMethod, options?: any): Promise<import("axios").AxiosResponse<SettingsViaApiResponse>>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated traits. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached and a sensitive field was updated (e.g. recovery email). Implies that the user needs to re-authenticate.  Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with a HTTP 302 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 302 redirect to the settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 302 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow with Profile Method
     * @param {string} [flow] Flow is flow ID.
     * @param {object} [payload]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    completeSelfServiceSettingsFlowWithProfileMethod(flow?: string, payload?: object, options?: any): Promise<import("axios").AxiosResponse<SettingsFlow>>;
    /**
     * Use this endpoint to complete a verification flow using the link method. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Complete Verification Flow with Link Method
     * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.
     * @param {string} [flow] The Flow ID  format: uuid
     * @param {CompleteSelfServiceVerificationFlowWithLinkMethod} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    completeSelfServiceVerificationFlowWithLinkMethod(token?: string, flow?: string, body?: CompleteSelfServiceVerificationFlowWithLinkMethod, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Get a Traits Schema Definition
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    getSchema(id: string, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?error=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [ORY Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get User-Facing Self-Service Errors
     * @param {string} error Error is the container\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    getSelfServiceError(error: string, options?: any): Promise<import("axios").AxiosResponse<ErrorContainer>>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    getSelfServiceLoginFlow(id: string, options?: any): Promise<import("axios").AxiosResponse<LoginFlow>>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Get information about a recovery flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    getSelfServiceRecoveryFlow(id: string, options?: any): Promise<import("axios").AxiosResponse<RecoveryFlow>>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    getSelfServiceRegistrationFlow(id: string, options?: any): Promise<import("axios").AxiosResponse<RegistrationFlow>>;
    /**
     * When accessing this endpoint through ORY Kratos\' Public API you must ensure that either the ORY Kratos Session Cookie or the ORY Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using ORY Kratos\' Admin API.  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    getSelfServiceSettingsFlow(id: string, options?: any): Promise<import("axios").AxiosResponse<SettingsFlow>>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    getSelfServiceVerificationFlow(id: string, options?: any): Promise<import("axios").AxiosResponse<VerificationFlow>>;
    /**
     * This endpoint initializes a logout flow.  > This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  On successful logout, the browser will be redirected (HTTP 302 Found) to `urls.default_return_to`.  More information can be found at [ORY Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @summary Initialize Browser-Based Logout User Flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    initializeSelfServiceBrowserLogoutFlow(options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint initiates a login flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for API clients
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    initializeSelfServiceLoginViaAPIFlow(refresh?: boolean, options?: any): Promise<import("axios").AxiosResponse<LoginFlow>>;
    /**
     * This endpoint initializes a browser-based user login flow. Once initialized, the browser will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    initializeSelfServiceLoginViaBrowserFlow(options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for API Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    initializeSelfServiceRecoveryViaAPIFlow(options?: any): Promise<import("axios").AxiosResponse<RecoveryFlow>>;
    /**
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for Browser Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    initializeSelfServiceRecoveryViaBrowserFlow(options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for API clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    initializeSelfServiceRegistrationViaAPIFlow(options?: any): Promise<import("axios").AxiosResponse<RegistrationFlow>>;
    /**
     * This endpoint initializes a browser-based user registration flow. Once initialized, the browser will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  :::note  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  :::  More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    initializeSelfServiceRegistrationViaBrowserFlow(options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid ORY Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for API Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    initializeSelfServiceSettingsViaAPIFlow(options?: any): Promise<import("axios").AxiosResponse<SettingsFlow>>;
    /**
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid ORY Kratos Session Cookie is included in the request, a login flow will be initialized.  :::note  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  :::  More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for Browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    initializeSelfServiceSettingsViaBrowserFlow(options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for API Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    initializeSelfServiceVerificationViaAPIFlow(options?: any): Promise<import("axios").AxiosResponse<VerificationFlow>>;
    /**
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for Browser Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    initializeSelfServiceVerificationViaBrowserFlow(options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to revoke a session using its token. This endpoint is particularly useful for API clients such as mobile apps to log the user out of the system and invalidate the session.  This endpoint does not remove any HTTP Cookies - use the Self-Service Logout Flow instead.
     * @summary Revoke and Invalidate a Session
     * @param {RevokeSession} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    revokeSession(body: RevokeSession, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  This endpoint is useful for reverse proxies and API Gateways.
     * @summary Check Who the Current HTTP Session Belongs To
     * @param {string} [cookie]
     * @param {string} [authorization] in: authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    whoami(cookie?: string, authorization?: string, options?: any): Promise<import("axios").AxiosResponse<Session>>;
}
/**
 * VersionApi - axios parameter creator
 * @export
 */
export declare const VersionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint returns the service version typically notated using semantic versioning.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Get service version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersion: (options?: any) => Promise<RequestArgs>;
};
/**
 * VersionApi - functional programming interface
 * @export
 */
export declare const VersionApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint returns the service version typically notated using semantic versioning.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Get service version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersion(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Version>>;
};
/**
 * VersionApi - factory interface
 * @export
 */
export declare const VersionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint returns the service version typically notated using semantic versioning.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Get service version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersion(options?: any): AxiosPromise<Version>;
};
/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
export declare class VersionApi extends BaseAPI {
    /**
     * This endpoint returns the service version typically notated using semantic versioning.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Get service version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    getVersion(options?: any): Promise<import("axios").AxiosResponse<Version>>;
}
